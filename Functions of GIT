# Basic to Advanced Git Functions

## Basic Git Commands

1. **git init**  
  Initializes a new Git repository in the current directory.

2. **git clone <repository_url>**  
  Clones an existing repository from a remote server to your local machine.

3. **git status**  
  Displays the state of the working directory and staging area.

4. **git add <file>**  
  Adds changes in the specified file(s) to the staging area.

5. **git commit -m "message"**  
  Records the changes in the repository with a descriptive message.

6. **git log**  
  Shows the commit history of the repository.

7. **git branch**  
  Lists all branches in the repository.

8. **git checkout <branch_name>**  
  Switches to the specified branch.

9. **git merge <branch_name>**  
  Merges the specified branch into the current branch.

10. **git remote add <name> <url>**  
   Adds a remote repository with a specified name.

11. **git push <remote_name> <branch_name>**  
   Pushes the committed changes to the remote repository.

12. **git pull <remote_name> <branch_name>**  
   Fetches and merges changes from the remote repository.

13. **git diff**  
   Shows the differences between the working directory and the staging area.

---

## Intermediate Git Commands

1. **git stash**  
  Temporarily saves changes that are not ready to be committed.

2. **git stash pop**  
  Applies the stashed changes and removes them from the stash list.

3. **git reset <file>**  
  Removes the specified file from the staging area.

4. **git reset --hard <commit_hash>**  
  Resets the repository to a specific commit, discarding all changes.

5. **git log --oneline**  
  Displays a compact view of the commit history.

6. **git tag <tag_name>**  
  Creates a tag for a specific commit.

7. **git fetch**  
  Downloads changes from the remote repository without merging them.

8. **git rebase <branch_name>**  
  Reapplies commits on top of another base branch.

---

## Advanced Git Commands

1. **git cherry-pick <commit_hash>**  
  Applies a specific commit from one branch to another.

2. **git bisect**  
  Helps to find the commit that introduced a bug by binary search.

3. **git reflog**  
  Shows a log of all references in the repository.

4. **git blame <file>**  
  Shows who made changes to each line of a file.

5. **git submodule add <repository_url> <path>**  
  Adds a submodule to the repository.

6. **git clean -f**  
  Removes untracked files from the working directory.

7. **git archive**  
  Creates an archive of files from a repository.

8. **git config --global <key> <value>**  
  Configures global Git settings.

9. **git show <commit_hash>**  
  Displays detailed information about a specific commit.

10. **git revert <commit_hash>**  
   Creates a new commit that undoes the changes of a specific commit.

11. **git worktree add <path> <branch_name>**  
   Creates a new working tree linked to a specific branch.

12. **git sparse-checkout**  
   Allows partial cloning of a repository by selecting specific files or directories.

---